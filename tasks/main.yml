---

## Golang
- name: Get the current go version
  become: yes
  become_method: sudo
  command: "{{ ansible_golang_dest }}/go/bin/go version"
  ignore_errors: yes
  register: ansible_golang_temp_version_and_target
  changed_when: false

- name: set ansible_golang_current_version_and_target to undefined if it is undefined
  become: yes
  become_method: sudo
  set_fact:
    ansible_golang_current_version_and_target: "undefined"
  when: ansible_golang_temp_version_and_target|failed

- name: set ansible_golang_current_version_and_target to the actual value if it is defined
  become: yes
  become_method: sudo
  set_fact:
    ansible_golang_current_version_and_target: "{{ ansible_golang_temp_version_and_target.stdout }}"
  when: ansible_golang_temp_version_and_target.stdout is defined

- name: Remove old version of go if we can't get the version. It is busted
  become: yes
  become_method: sudo
  file:
    path: "{{ ansible_golang_dest }}/go"
    state: absent
  when: ansible_golang_current_version_and_target != ansible_golang_version_and_target


- name: Download the go distro
  become: yes
  become_method: sudo
  get_url:
    url: "{{ ansible_golang_download_base_url }}/{{ ansible_golang_tar_name }}"
    dest: "{{ ansible_golang_dest }}/src/{{ ansible_golang_tar_name }}"
    checksum: "{{ ansible_golang_tar_checksum }}"
  when: ansible_golang_current_version_and_target != ansible_golang_version_and_target

- name: Remove old version of go if the version is wrong.
  become: yes
  become_method: sudo
  file:
    path: "{{ ansible_golang_dest }}/go"
    state: absent
  when: ansible_golang_current_version_and_target != ansible_golang_version_and_target

- name: Install go if necessary
  become: yes
  become_method: sudo
  unarchive:
    src: "{{ ansible_golang_dest }}/src/{{ ansible_golang_tar_name }}"
    dest: "{{ ansible_golang_dest }}"
    copy: no
  when: ansible_golang_current_version_and_target != ansible_golang_version_and_target

- name: Setup paths for users
  become: yes
  become_method: sudo
  template:
    src: go_vars.sh.j2
    dest: /etc/profile.d/go_vars.sh

- name: Remove downloaded tar "{{ ansible_golang_dest }}/src/{{ ansible_golang_tar_name }}"
  become: yes
  become_method: sudo
  file:
    path: "{{ ansible_golang_dest }}/src/{{ ansible_golang_tar_name }}"
    state: absent

## Glide
- name: Ensure that {{ ansible_golang_gopath }}/bin exists
  file:
    path: "{{ ansible_golang_gopath }}/bin"
    state: directory
    owner: "{{ ansible_golang_user }}"
    group: "{{ ansible_golang_group }}"

- name: Download glide if requested
  become: yes
  become_method: sudo
  get_url:
    url: "{{ ansible_golang_glide_download_base_url }}/{{ ansible_golang_glide_sh_name }}"
    dest: "{{ ansible_golang_dest }}/src/{{ ansible_golang_glide_sh_name }}"
  when: ansible_golang_install_glide is defined

- name: Set perms on glide get script
  become: yes
  become_method: sudo
  file:
    path: "{{ ansible_golang_dest }}/src/{{ ansible_golang_glide_sh_name }}"
    mode: 0755

- name: Install glide if requested
  shell: "{{ ansible_golang_dest }}/src/{{ ansible_golang_glide_sh_name }}"
  when: ansible_golang_install_glide is defined

- name: Remove downloaded script
  become: yes
  become_method: sudo
  file:
    path: "{{ ansible_golang_dest }}/src/{{ ansible_golang_glide_sh_name }}"
    state: absent
